# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

image: "python:3.10-bullseye"

# Run branch pipeline only if no MR pipeline exists
workflow:
  rules:
    - if: $CI_PIPELINE_TRIGGERED
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

# List of stages for jobs, and their order of execution
stages:          
  - test
  - docs
  - changelogtest
  - upload

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  rules:
    - if: $CI_PIPELINE_SOURCE == 'push'
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  before_script:
    - python -m pip install pytest pytest-cov
    - python -m pip install .
  script:
    - pytest tests -v --cov=profi_dcp

  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  rules:
    - if: $CI_PIPELINE_SOURCE == 'push'
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  before_script:
    - python -m pip install .
    - python -m pip install pylint
  script:
    - pylint src
  allow_failure: true

black-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  rules:
    - if: $CI_PIPELINE_SOURCE == 'push'
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  before_script:
    - python -m pip install black
    - python -m pip install .
  script:
    - black src --check

deploy-job:
  stage: upload
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/ && $CI_COMMIT_REF_PROTECTED == "true"'
  before_script:
    - python -m pip install twine kac-tools
  script:
    - mkdir public
    - kac-tools >> public/RELEASENOTES.md
    - python -m pip wheel --no-deps .
    - twine check *.whl
    - twine upload *.whl
  artifacts:
    paths:
      - public
  needs:
    - unit-test-job
    - lint-test-job

gitlab-release-job:
  stage: upload
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/ && $CI_COMMIT_REF_PROTECTED == "true"'
  script:
    - echo "running gitlab-release-job"
  release:
    tag_name: '$CI_COMMIT_TAG'
    description: './public/RELEASENOTES.md'
  needs:
    - deploy-job
